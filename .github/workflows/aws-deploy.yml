name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1 # Região da AWS, alinhada com o Terraform
  ECR_REPOSITORY: quiosque-food-repository # Nome do repositório ECR, alinhado com o Terraform
  EKS_CLUSTER_NAME: quiosque-food-cluster # Nome do cluster EKS, alinhado com o Terraform
  IMAGE_TAG: ${{ github.sha }}
  DOTNET_VERSION: '9.0.x' # Versão do .NET

jobs:
  build-and-test:
    name: Build and Test .NET
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test # Depende do sucesso do job de build e teste
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f src/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  terraform-apply:
    name: Apply Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-test # Terraform can run after build-and-test, it doesn't need the image to be pushed yet.

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.x # Use a versão mais recente do Terraform 1.x

    - name: Terraform Validate
      run: terraform validate
      working-directory: terraform

    - name: Terraform Init
      run: terraform init
      working-directory: terraform # Onde seus arquivos .tf estão localizados

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: terraform

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: terraform-apply # Agora depende do sucesso do job do Terraform