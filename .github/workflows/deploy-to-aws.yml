name: Deploy QuiosqueFood3000 Order to AWS

on:  push:    branches: [ main, develop ]  pull_request:    branches: [ main ]

env:  AWS_REGION: us-east-1  ECR_REPOSITORY: quiosquefood3000-order  ECS_SERVICE: QuiosqueFood3000Order-production-service  ECS_CLUSTER: QuiosqueFood3000Order-production-cluster  ECS_TASK_DEFINITION: QuiosqueFood3000Order-production-task  CONTAINER_NAME: order-api

jobs:  test:    name: Run Tests    runs-on: ubuntu-latest        steps:    - name: Checkout code      uses: actions/checkout@v4          - name: Setup .NET      uses: actions/setup-dotnet@v4      with:        dotnet-version: '8.0.x'          - name: Restore dependencies      run: dotnet restore          - name: Build      run: dotnet build --no-restore --configuration Release          - name: Run tests      run: dotnet test --no-build --configuration Release --verbosity normal

  build-and-deploy:    name: Build and Deploy to AWS    runs-on: ubuntu-latest    needs: test    if: github.ref == 'refs/heads/main'        steps:    - name: Checkout code      uses: actions/checkout@v4

    - name: Configure AWS credentials      uses: aws-actions/configure-aws-credentials@v4      with:        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR      id: login-ecr      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR      id: build-image      env:        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        IMAGE_TAG: ${{ github.sha }}      run: |        # Build a docker container and push it to ECR        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition      id: task-def      uses: aws-actions/amazon-ecs-render-task-definition@v1      with:        task-definition: aws/task-definition.json        container-name: ${{ env.CONTAINER_NAME }}        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition      uses: aws-actions/amazon-ecs-deploy-task-definition@v1      with:        task-definition: ${{ steps.task-def.outputs.task-definition }}        service: ${{ env.ECS_SERVICE }}        cluster: ${{ env.ECS_CLUSTER }}        wait-for-service-stability: true

    - name: Update MongoDB Atlas connection (if using Atlas)      run: |        echo "Update your application configuration to use MongoDB Atlas or DocumentDB"        echo "Connection string should be set in ECS task definition environment variables"

  deploy-infrastructure:    name: Deploy Infrastructure (Manual Trigger)    runs-on: ubuntu-latest    if: github.event_name == 'workflow_dispatch'        steps:    - name: Checkout code      uses: actions/checkout@v4

    - name: Configure AWS credentials      uses: aws-actions/configure-aws-credentials@v4      with:        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation stack      run: |        aws cloudformation deploy \          --template-file aws/infrastructure.yml \          --stack-name quiosquefood3000-order-infrastructure \          --parameter-overrides \            ProjectName=QuiosqueFood3000Order \            Environment=production \          --capabilities CAPABILITY_IAM \          --region ${{ env.AWS_REGION }}