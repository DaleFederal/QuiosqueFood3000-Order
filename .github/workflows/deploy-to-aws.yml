name: 'QuiosqueFood3000 - CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      deploy_app:
        description: 'Deploy Application'
        required: true
        default: true
        type: boolean

env:
  # AWS Configuration
  AWS_REGION: 'us-east-1'
  
  # Terraform Configuration
  TF_VERSION: '1.6.0'
  
  # Application Configuration
  ECR_REPOSITORY: quiosquefood3000-order
  ECS_SERVICE: QuiosqueFood3000Order-production-service
  ECS_CLUSTER: QuiosqueFood3000Order-production-cluster
  ECS_TASK_DEFINITION: QuiosqueFood3000Order-production-task
  CONTAINER_NAME: order-api
  PROJECT_NAME: QuiosqueFood3000Order
  ENVIRONMENT: production

permissions:
  contents: read
  pull-requests: write

jobs:
  # Job 1: Run tests
  test:
    name: 'Run Tests'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  # Job 2: Terraform Infrastructure Management
  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request') ||
      (github.event_name == 'workflow_dispatch')
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    outputs:
      terraform_plan_status: ${{ steps.plan.outcome }}
      ecr_repository_url: ${{ steps.outputs.outputs.ecr_repository_url }}
      ecs_cluster_name: ${{ steps.outputs.outputs.ecs_cluster_name }}
      ecs_service_name: ${{ steps.outputs.outputs.ecs_service_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="aws_region=${{ env.AWS_REGION }}"
      continue-on-error: true

    - name: Update Pull Request with Terraform Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: |
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply')
      run: |
        terraform apply -auto-approve -input=false tfplan

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform destroy -auto-approve -input=false \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="aws_region=${{ env.AWS_REGION }}"

    - name: Get Terraform Outputs
      id: outputs
      if: |
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply')
      run: |
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        echo "ecs_service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT

    - name: Upload Terraform Plan
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 30

  # Job 3: Build and Deploy Application
  build-and-deploy:
    name: 'Build and Deploy Application'
    runs-on: ubuntu-latest
    needs: [test, terraform]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.terraform.outputs.terraform_plan_status == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_app == 'true' && github.event.inputs.terraform_action != 'destroy')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Verify ECR repository exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || {
          echo "ECR repository not found. Creating..."
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        }

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json || {
          echo "Task definition not found. Using local template..."
          cp aws/task-definition.json task-definition.json
        }

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get Load Balancer URL
      run: |
        LB_ARN=$(aws elbv2 describe-load-balancers \
          --names "$PROJECT_NAME-$ENVIRONMENT-alb" \
          --query 'LoadBalancers[0].LoadBalancerArn' \
          --output text 2>/dev/null || echo "")
        
        if [ "$LB_ARN" != "" ] && [ "$LB_ARN" != "None" ]; then
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --load-balancer-arns $LB_ARN \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "üöÄ Application deployed successfully!"
          echo "üåê Application URL: http://$LB_DNS"
          echo "üìä Health check: http://$LB_DNS/health"
        else
          echo "‚ö†Ô∏è Load balancer not found. Application deployed to ECS but URL not available."
        fi

  # Job 4: Deployment Summary
  deployment-summary:
    name: 'Deployment Summary'
    runs-on: ubuntu-latest
    needs: [test, terraform, build-and-deploy]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Deployment Summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Terraform | ${{ needs.terraform.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Deploy | ${{ needs.build-and-deploy.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
          echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify application health at the load balancer URL" >> $GITHUB_STEP_SUMMARY
          echo "2. Check CloudWatch logs for any issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor ECS service metrics" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Deployment failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi