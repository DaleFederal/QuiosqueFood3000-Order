name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.apply.outputs.instance_id }}
      s3_bucket_name: ${{ steps.apply.outputs.s3_bucket_name }}
      ecr_repo_name: ${{ steps.apply.outputs.ecr_repo_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: |
          terraform -chdir=./terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-1"

      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=./terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"
          echo "instance_id=$(terraform -chdir=./terraform output -raw instance_id)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform -chdir=./terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "ecr_repo_name=$(terraform -chdir=./terraform output -raw ecr_repo_name)" >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: terraform # Depende do job terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.terraform.outputs.ecr_repo_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f src/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Upload init.sql to S3
        run: |
          aws s3 cp src/init.sql s3://${{ needs.terraform.outputs.s3_bucket_name }}/init.sql

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ needs.terraform.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying new version" \
            --parameters 'commands=[
              "cd /home/ec2-user/app",
              "aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket_name }}/init.sql .",
              "sudo /usr/local/bin/docker-compose pull",
              "sudo /usr/local/bin/docker-compose up -d --remove-orphans"
            ]'