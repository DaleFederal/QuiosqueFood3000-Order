name: 'Terraform Infrastructure'

on:
  # Executa quando um PR √© aberto/atualizado (apenas plan)
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
    types: [opened, synchronize, reopened]
  
  # Executa quando um PR √© mergeado na main (plan + apply)
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  
  # Execu√ß√£o manual para casos especiais
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: false
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true

permissions:
  contents: read
  pull-requests: write
  id-token: write  # This is required for requesting the JWT

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false  # Importante para evitar problemas com outputs

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      id: init
      run: |
        echo "üîß Initializing Terraform..."
        terraform init -no-color
      continue-on-error: false

    - name: Terraform Format Check
      id: fmt
      run: |
        echo "üé® Checking Terraform format..."
        terraform fmt -check -diff -no-color
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: |
        echo "‚úÖ Validating Terraform configuration..."
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        echo "üìã Planning Terraform changes..."
        terraform plan -no-color -input=false -out=tfplan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      continue-on-error: false

    - name: Show Terraform Plan
      id: show
      run: |
        echo "üìñ Showing Terraform plan..."
        terraform show -no-color tfplan
      continue-on-error: true

    # Update Pull Request with Terraform Plan
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.show.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Delete previous comments
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          for (const comment of comments.data) {
            if (comment.body.includes('Terraform Format and Style')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }

          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        echo "‚ùå Terraform Plan failed!"
        exit 1

    # Apply only when code is pushed to main (after PR merge)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üöÄ PR was merged to main - Applying Terraform changes automatically..."
        echo "Merged by: ${{ github.actor }}"
        echo "Commit: ${{ github.sha }}"
        terraform apply -auto-approve -no-color tfplan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    # Manual destroy option
    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        echo "üí• Destroying Terraform resources..."
        terraform destroy -auto-approve -no-color -input=false
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    # Manual apply option
    - name: Manual Terraform Apply
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        echo "üöÄ Manually applying Terraform changes..."
        terraform apply -auto-approve -no-color -input=false
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Upload Terraform Plan
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.sha }}
        path: terraform/tfplan
        retention-days: 30