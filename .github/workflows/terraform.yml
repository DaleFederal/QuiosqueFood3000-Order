name: 'Terraform Infrastructure'

on:
  push:
    paths:
      - 'terraform/**'
  pull_request:
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
      continue-on-error: true

    # Update Pull Request with Terraform Plan
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå`${{ steps.fmt.outcome }}`
          #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
          #### Terraform Validation ü§ñ`${{ steps.validate.outcome }}`
          #### Terraform Plan üìñ`${{ steps.plan.outcome }}`

          <details><summary>Show Plan</summary>

          ```\n
          ${process.env.PLAN}
          ```

          </details>

          *Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Terraform Plan Status
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply      
      run: terraform apply -auto-approve -input=false

    # Terraform Destroy (manual trigger only)
    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve -input=false

    # Upload Terraform Plan as artifact
    - name: Upload Terraform Plan
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 30